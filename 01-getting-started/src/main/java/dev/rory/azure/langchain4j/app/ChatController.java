package dev.rory.azure.langchain4j.app;

import dev.langchain4j.model.azure.AzureOpenAiChatModel;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

/**
 * Simple REST controller exposing a chat endpoint.
 * Delegates requests to the AzureOpenAiChatModel provided by LangChain4j.
 * 
 * This controller demonstrates basic stateless chat completion without memory.
 * For conversational chat with history, see {@link ConversationController}.
 */
@RestController
@RequestMapping("/api/chat")
public class ChatController {

  private final AzureOpenAiChatModel model;

  /**
   * Constructor injection of the chat model bean.
   * Model is configured via LangChainConfig or environment variables.
   *
   * @param model configured Azure OpenAI chat model
   */
  public ChatController(AzureOpenAiChatModel model) {
    this.model = model;
  }

  /**
   * Accept a JSON payload containing a "message" and return a
   * response generated by the underlying Azure model.  Example
   * request: {"message":"Hello"}
   */
  @PostMapping
  public ResponseEntity<Map<String, Object>> chat(@RequestBody Map<String, String> body) {
    String prompt = body.getOrDefault("message", "Hello");
    try {
      String answer = model.chat(prompt);
      return ResponseEntity.ok(Map.of("prompt", prompt, "answer", answer));
    } catch (Exception e) {
      // Propagate error details back to the client
      return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
          .body(Map.of(
              "prompt", prompt,
              "error", e.getMessage() != null ? e.getMessage() : "Unknown error"
          ));
    }
  }

  /**
   * Simple health check endpoint used by deployment probes.
   */
  @GetMapping("/health")
  public Map<String, String> health() {
    return Map.of("status", "ok");
  }
}